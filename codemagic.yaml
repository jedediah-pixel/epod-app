workflows:
  ios_testflight:
    name: iOS → TestFlight (Flutter)
    max_build_duration: 60

    environment:
      flutter: stable
      xcode: latest
      vars:
        BUNDLE_ID: com.yourco.hmepod
        XCODE_SCHEME: Runner
        XCODE_PROJECT: ios/Runner.xcodeproj
        XCODE_WORKSPACE: ios/Runner.xcworkspace
      groups:
        - app_store_credentials   # APP_STORE_CONNECT_* + APPLE_TEAM_ID

    scripts:
      - name: Print tool versions
        script: |
          echo "codemagic-cli-tools: $(codemagic-cli-tools version)"
          app-store-connect --version || true
          xcode-project --version || true

      - name: Flutter pub get
        script: flutter pub get

      - name: CocoaPods install
        script: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Import distribution P12 and fetch profiles
        script: |
          set -e

          # 0) Sanity checks for env vars
          if [ -z "${DISTRIBUTION_P12_BASE64:-}" ] || [ -z "${DISTRIBUTION_P12_PASSWORD:-}" ]; then
            echo "❌ DISTRIBUTION_P12_BASE64 or DISTRIBUTION_P12_PASSWORD is missing"
            exit 2
          fi

          # 1) Write the P12 to disk
          CERT_DIR="$HOME/Library/MobileDevice/Certificates"
          mkdir -p "$CERT_DIR"
          CERT_PATH="$CERT_DIR/env_cert.p12"
          echo "$DISTRIBUTION_P12_BASE64" | base64 --decode > "$CERT_PATH"
          echo "$CERT_PATH"

          # 2) Quick password check (fails fast if wrong)
          openssl pkcs12 -in "$CERT_PATH" -nokeys -clcerts -passin pass:"$DISTRIBUTION_P12_PASSWORD" -info >/dev/null

          # 3) Create & select a clean keychain
          keychain initialize
          # Find the default keychain path Codemagic just created
          KEYCHAIN_PATH=$(security default-keychain -d user | awk -F\" '{print $2}')
          echo "Using keychain: $KEYCHAIN_PATH"

          # 4) Import the P12 into that keychain WITH the password
          security import "$CERT_PATH" \
            -k "$KEYCHAIN_PATH" \
            -P "$DISTRIBUTION_P12_PASSWORD" \
            -T /usr/bin/codesign -T /usr/bin/security -A

          # 5) Make sure codesign tools can use the key (sometimes needed)
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN_PATH" || true

          # 6) Fetch/create APP STORE provisioning profiles for your bundle id
          # (Note: bundle id is a positional arg for this CLI)
          app-store-connect fetch-signing-files "com.yourco.hmepod" --type IOS_APP_STORE --create

          # 7) Apply the profiles to the Xcode project (your CLI supports --project)
          xcode-project use-profiles --project ios/Runner.xcodeproj --scheme "Runner"

          # 8) Debug listings
          ls -al "$HOME/Library/MobileDevice/Certificates" || true
          ls -al "$HOME/Library/MobileDevice/Provisioning Profiles" || true
          security find-identity -v -p codesigning || true


      - name: Build IPA
        script: |
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"

      - name: Publish to TestFlight
        script: |
          app-store-connect publish \
            --path "build/ios/ipa/*.ipa" \
            --submit-to-testflight true \
            --release-type MANUAL

    artifacts:
      - build/ios/ipa/*.ipa

