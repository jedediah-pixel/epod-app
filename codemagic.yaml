workflows:
  ios_testflight:
    name: iOS â†’ TestFlight (Flutter)
    max_build_duration: 60

    environment:
      flutter: stable
      xcode: latest
      vars:
        BUNDLE_ID: com.yourco.hmepod
        XCODE_WORKSPACE: ios/Runner.xcworkspace
        XCODE_SCHEME: Runner
      groups:
        - app_store_credentials   # optional: if you stored the Apple vars in a group

    scripts:
      - name: Flutter pub get
        script: flutter pub get

      - name: CocoaPods install
        script: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Import distribution P12 and fetch profiles
        script: |
          set -e

          # Write the P12 from base64
          CERT_DIR="$HOME/Library/MobileDevice/Certificates"
          mkdir -p "$CERT_DIR"
          echo "$DISTRIBUTION_P12_BASE64" | base64 --decode > "$CERT_DIR/env_cert.p12"
          echo "$CERT_DIR/env_cert.p12"
          ls -l "$CERT_DIR/env_cert.p12"

          # Create & unlock a dedicated keychain
          keychain initialize
          KEYCHAIN_PATH="$HOME/Library/codemagic-cli-tools/keychains/codemagic.keychain-db"

          # Import the P12 with the password
          security import "$CERT_DIR/env_cert.p12" -k "$KEYCHAIN_PATH" -P "$DISTRIBUTION_P12_PASSWORD" -A -T /usr/bin/codesign

          # Fetch/create the App Store profile for your bundle id (positional arg!)
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create

          # Apply the profiles to the project (your CLI expects --project, not --workspace)
          xcode-project use-profiles --project ios/Runner.xcodeproj --scheme "$XCODE_SCHEME"

          # Sanity check
          ls -l "$HOME/Library/MobileDevice/Provisioning Profiles" || true

      - name: Build IPA
        script: |
          # Build & export IPA. Do not pass --export-method; let the tool detect from the profile.
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"

      - name: Publish to TestFlight
        script: |
          app-store-connect publish \
            --path "build/ios/ipa/*.ipa" \
            --submit-to-testflight true \
            --release-type MANUAL

    artifacts:
      - build/ios/ipa/*.ipa
