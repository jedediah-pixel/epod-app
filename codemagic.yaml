workflows:
  ios_testflight:
    name: iOS â†’ TestFlight (Flutter)
    max_build_duration: 60

    environment:
      flutter: stable
      xcode: latest
      vars:
        BUNDLE_ID: com.yourco.hmepod
        XCODE_SCHEME: Runner
        XCODE_PROJECT: ios/Runner.xcodeproj
        XCODE_WORKSPACE: ios/Runner.xcworkspace
      groups:
        - app_store_credentials   # contains the 4 APP_STORE_CONNECT_* vars + APPLE_TEAM_ID

    scripts:
      - name: Flutter pub get
        script: flutter pub get

      - name: CocoaPods install
        script: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Import distribution P12 and fetch profiles
        script: |
          # --- sanity checks ---
          if [ -z "${DISTRIBUTION_P12_BASE64:-}" ] || [ -z "${DISTRIBUTION_P12_PASSWORD:-}" ]; then
            echo "ERROR: DISTRIBUTION_P12_BASE64 or DISTRIBUTION_P12_PASSWORD is not set"; exit 2
          fi

          # --- materialize base64 P12 to disk (safe one-liner, no heredoc indentation issues) ---
          python3 -c 'import os,base64,pathlib; b=os.environ["DISTRIBUTION_P12_BASE64"].strip(); p=pathlib.Path(os.environ["HOME"])/"Library/MobileDevice/Certificates"/"env_cert.p12"; p.parent.mkdir(parents=True,exist_ok=True); p.write_bytes(base64.b64decode(b.encode())); print(p)'

          CERT_DIR="$HOME/Library/MobileDevice/Certificates"
          echo "$CERT_DIR/env_cert.p12"

          # --- create keychain and import the P12 using its password ---
          keychain initialize
          keychain add-certificates \
            --certificate "$CERT_DIR/env_cert.p12" \
            --certificate-pass "$DISTRIBUTION_P12_PASSWORD"

          # --- fetch/create provisioning profiles and apply them ---
          app-store-connect fetch-signing-files \
            --bundle-id "$BUNDLE_ID" \
            --type IOS_APP_STORE \
            --create

          xcode-project use-profiles \
            --project "$XCODE_PROJECT" \
            --scheme "$XCODE_SCHEME"

      - name: Build IPA
        script: |
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"

      - name: Publish to TestFlight
        script: |
          app-store-connect publish \
            --path "build/ios/ipa/*.ipa" \
            --submit-to-testflight true \
            --release-type MANUAL

    artifacts:
      - build/ios/ipa/*.ipa
