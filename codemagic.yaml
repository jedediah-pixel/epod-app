workflows:
  ios_testflight:
    name: iOS â†’ TestFlight (Flutter)
    max_build_duration: 60

    environment:
      flutter: stable
      xcode: latest
      vars:
        BUNDLE_ID: com.yourco.hmepod
        XCODE_SCHEME: Runner
        XCODE_PROJECT: ios/Runner.xcodeproj
        XCODE_WORKSPACE: ios/Runner.xcworkspace
      groups:
        - app_store_credentials   # APP_STORE_CONNECT_* + APPLE_TEAM_ID

    scripts:
      - name: Print tool versions
        script: |
          echo "codemagic-cli-tools: $(codemagic-cli-tools version)"
          app-store-connect --version || true
          xcode-project --version || true

      - name: Flutter pub get
        script: flutter pub get

      - name: CocoaPods install
        script: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Import distribution P12 and fetch profiles
        script: |
          # Ensure the secure vars exist
          if [ -z "${DISTRIBUTION_P12_BASE64:-}" ] || [ -z "${DISTRIBUTION_P12_PASSWORD:-}" ]; then
            echo "ERROR: DISTRIBUTION_P12_BASE64 or DISTRIBUTION_P12_PASSWORD is not set"; exit 2
          fi

          # Materialize the base64 .p12 to disk (single-line Python avoids YAML indentation pitfalls)
          python3 - <<'PY'
          import os, base64, pathlib
          b = os.environ["DISTRIBUTION_P12_BASE64"].strip().encode()
          p = pathlib.Path(os.environ["HOME"]) / "Library/MobileDevice/Certificates" / "env_cert.p12"
          p.parent.mkdir(parents=True, exist_ok=True)
          p.write_bytes(base64.b64decode(b))
          print(p)
          PY

          CERT_DIR="$HOME/Library/MobileDevice/Certificates"
          echo "$CERT_DIR/env_cert.p12"

          # Create keychain and import the P12 with its password
          keychain initialize
          keychain add-certificates \
            --certificate "$CERT_DIR/env_cert.p12" \
            --certificate-pass "$DISTRIBUTION_P12_PASSWORD"

          # Fetch/create provisioning profiles (positional bundle id for CLI 0.60.x)
          app-store-connect fetch-signing-files "$BUNDLE_ID" \
            --type IOS_APP_STORE \
            --create

          # Apply profiles to the project (no --scheme on this CLI)
          xcode-project use-profiles \
            --project "$XCODE_PROJECT"

      - name: Build IPA
        script: |
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"

      - name: Publish to TestFlight
        script: |
          app-store-connect publish \
            --path "build/ios/ipa/*.ipa" \
            --submit-to-testflight true \
            --release-type MANUAL

    artifacts:
      - build/ios/ipa/*.ipa
