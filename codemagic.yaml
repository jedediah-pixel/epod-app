workflows:
  ios_testflight:
    name: iOS → TestFlight (Flutter)
    max_build_duration: 60

    environment:
      flutter: stable
      xcode: latest
      vars:
        BUNDLE_ID: com.yourco.hmepod
        XCODE_SCHEME: Runner
        XCODE_PROJECT: ios/Runner.xcodeproj
        XCODE_WORKSPACE: ios/Runner.xcworkspace
      groups:
        - app_store_credentials   # APP_STORE_CONNECT_* + APPLE_TEAM_ID

    scripts:
      - name: Print tool versions
        script: |
          echo "codemagic-cli-tools: $(codemagic-cli-tools version)"
          app-store-connect --version || true
          xcode-project --version || true

      - name: Flutter pub get
        script: flutter pub get

      - name: CocoaPods install
        script: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Import distribution P12 and fetch profiles
        script: |
          set -e

          # 1) Write the p12 from env to the expected folder
          CERT_DIR="$HOME/Library/MobileDevice/Certificates"
          mkdir -p "$CERT_DIR"
          if [ -z "${DISTRIBUTION_P12_BASE64:-}" ]; then
            echo "ERROR: DISTRIBUTION_P12_BASE64 is empty"; exit 2
          fi
          echo "$DISTRIBUTION_P12_BASE64" | base64 --decode > "$CERT_DIR/env_cert.p12"
          echo "$CERT_DIR/env_cert.p12"
          ls -l "$CERT_DIR/env_cert.p12"

          # 2) Import the p12 into a temporary keychain (use your password var; leave empty if none)
          keychain initialize
          keychain add-certificates || true
          security import "$CERT_DIR/env_cert.p12" -P "${DISTRIBUTION_P12_PASSWORD:-}" -A || {
            echo "ERROR: Failed to import p12 (check password)"; exit 3; }

          # Sanity: list code signing identities
          security find-identity -p codesigning -v || true

          # 3) Fetch/create App Store provisioning profile(s) for the bundle in the project
          #    (NO --certificate-key, NO --bundle-id — your CLI reads the project’s bundle id)
          app-store-connect fetch-signing-files --type IOS_APP_STORE --create

          # 4) Apply profiles to the Xcode project (NO --scheme)
          xcode-project use-profiles --project ios/Runner.xcodeproj

          # Optional: list profiles found
          ls -al "$HOME/Library/MobileDevice/Provisioning Profiles" || true

      - name: Build IPA
        script: |
          xcode-project build-ipa \
            --workspace "$XCODE_WORKSPACE" \
            --scheme "$XCODE_SCHEME"

      - name: Publish to TestFlight
        script: |
          app-store-connect publish \
            --path "build/ios/ipa/*.ipa" \
            --submit-to-testflight true \
            --release-type MANUAL

    artifacts:
      - build/ios/ipa/*.ipa

