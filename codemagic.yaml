workflows:
  ios_testflight:
    name: iOS â†’ TestFlight (Flutter)
    max_build_duration: 60

    environment:
      flutter: stable
      xcode: latest
      vars:
        BUNDLE_ID: com.yourco.hmepod
        XCODE_SCHEME: Runner
        XCODE_PROJECT: ios/Runner.xcodeproj
        XCODE_WORKSPACE: ios/Runner.xcworkspace
      groups:
        - app_store_credentials   # APP_STORE_CONNECT_* + APPLE_TEAM_ID

    scripts:
      - name: Print tool versions
        script: |
          echo "codemagic-cli-tools: $(codemagic-cli-tools version)"
          app-store-connect --version || true
          xcode-project --version || true

      - name: Flutter pub get
        script: flutter pub get

      - name: CocoaPods install
        script: |
          cd ios
          pod install --repo-update
          cd ..

      - name: Import distribution P12 and fetch profiles
        script: |
          set -euo pipefail

          # 0) Sanity
          if [ -z "${DISTRIBUTION_P12_BASE64:-}" ] || [ -z "${DISTRIBUTION_P12_PASSWORD:-}" ]; then
            echo "DISTRIBUTION_P12_* env vars are not set"; exit 2
          fi

          # 1) Materialize the base64 P12 to disk
          CERT_DIR="$HOME/Library/MobileDevice/Certificates"
          mkdir -p "$CERT_DIR"
          python3 - <<'PY'
          import os, base64, pathlib
          b64 = os.environ['DISTRIBUTION_P12_BASE64'].strip()
          p   = pathlib.Path.home()/'Library/MobileDevice/Certificates'/'env_cert.p12'
          p.write_bytes(base64.b64decode(b64.encode()))
          PY

          # 2) Initialize keychain & import the P12 with password
          keychain initialize
          keychain add-certificates \
            --certificate "$CERT_DIR/env_cert.p12" \
            --certificate-pass "$DISTRIBUTION_P12_PASSWORD"

          # 3) Fetch (or create) the App Store profile for your bundle id
          app-store-connect fetch-signing-files "$BUNDLE_ID" --type IOS_APP_STORE --create

          # Show what we got (useful for debugging)
          ls -al "$HOME/Library/MobileDevice/Provisioning Profiles" || true

          # 4) Apply those profiles to the project (workspace first, then project fallback)
          xcode-project use-profiles --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME" \
          || xcode-project use-profiles --project ios/Runner.xcodeproj

      - name: Build IPA
        script: |
          set -euo pipefail
          xcode-project build-ipa --workspace "$XCODE_WORKSPACE" --scheme "$XCODE_SCHEME" \
          || xcode-project build-ipa --project ios/Runner.xcodeproj --scheme "$XCODE_SCHEME"

      - name: Publish to TestFlight
        script: |
          app-store-connect publish \
            --path "build/ios/ipa/*.ipa" \
            --submit-to-testflight true \
            --release-type MANUAL

    artifacts:
      - build/ios/ipa/*.ipa

